import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;

import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.event.EventListenerList;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;

public class EHLoggerThread extends Thread implements Runnable{
	
	private File _pathToEventLogger;
	private Process _ehLoggerProcess;
	JTextArea _bufferText;
    // Create the a custom listener list
    protected EventListenerList _MyListenerList =
    		new EventListenerList();

	public void run()  {
		// The path to the iROS package and the Event Heap location is read dynamically
		// out of the config XML file.

		// It must be differentiated between the different OS because the syntax
		// of the JAVA Compiler call is a little different.
		String separator;
		
			if (System.getProperty("os.name").contains("Windows"))
				separator = ";";
			else
				separator = ":";
		
		SAXBuilder builder = new SAXBuilder();
		File configFile = new File("configStarter.xml");
			Document docWithConfig = new Document();
		try {
			docWithConfig = builder.build(configFile);
			Element xmlFileRoot = docWithConfig.getRootElement();
			if (xmlFileRoot != null) {
				// Construct launch commnand for the event heap
				// from the information in the XML file.
				String iROSLoc = xmlFileRoot.getChild("Libraries").getChild("iROS").getValue();
				String cmd = "java -cp " + iROSLoc + separator + " "
				+ "iwork.eheap2.logger.EventLogger";
				try {
					_ehLoggerProcess = Runtime.getRuntime().exec(cmd);
					BufferedReader input = new BufferedReader(new InputStreamReader(
							_ehLoggerProcess.getInputStream()));
					while ((input.readLine()) != null) {
					}
				} catch (IOException e1) {
					// Just ignore that. The Event Logger was closed.
				}
				FireActionEvent.fireEvent (new ActionEvent(this, ActionEvent.ACTION_PERFORMED, 
						"EHLogger Stopped"), _MyListenerList);
				System.out.println(" Es geht direkt weiter");
			}
		} catch (JDOMException e) {
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("Corrupt XML file");
		}
	}
	
	public void kill() {
		_ehLoggerProcess.destroy();
	}

	// This methods allows classes to register for MyEvents
	    public void addEHLoggerEventListener(ActionListener listener) {
	        _MyListenerList.add(ActionListener.class, listener);
	    }
	    
}

