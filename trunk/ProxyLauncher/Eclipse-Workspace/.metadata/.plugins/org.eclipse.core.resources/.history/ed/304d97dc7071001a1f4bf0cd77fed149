import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JToggleButton;

// This extended JToggleButton changes its color when activated or deactivated
@SuppressWarnings("serial")
public class ChangeColorButton extends JToggleButton implements ActionListener{

	private Color _activatedColor;
	private Color _deactivatedColor;
	private JToggleButton _correspondingButton;
	private JComboBox _correspondingComboBox;
	private ProxyNode _correspondingProxyNode;
	private String _executablePrefix;
	
	public ChangeColorButton () {
		super();
		setSelected(false);
		addActionListener(this);
	}
	
	public ChangeColorButton (String label) {
		super(label);
		addActionListener(this);
	}
	
	public ChangeColorButton (Color activatedColor, Color deactivatedColor){
		super();
		_activatedColor = activatedColor;
		_deactivatedColor = deactivatedColor;
		setSelected(false);
		setUI(new CustomButtonUI(activatedColor));
		setBackground(deactivatedColor);
		addActionListener(this);
	}
	
	public ChangeColorButton (String label, Color activatedColor, Color deactivatedColor){
		super(label);
		_activatedColor = activatedColor;
		_deactivatedColor = deactivatedColor;
		setSelected(false);
		setUI(new CustomButtonUI(activatedColor));
		setBackground(deactivatedColor);
		addActionListener(this);
	}
	
	public void actionPerformed(ActionEvent e) {
		if (_correspondingComboBox != null)
			System.out.println(_correspondingComboBox.getSelectedItem() + "index" +_correspondingComboBox.getSelectedIndex());
		
		if (!isSelected())
		{
			_correspondingProxyNode.setIsRunning(false);
			setBackground(getDeactivatedColor());
			if (_correspondingButton != null)
				_correspondingButton.setEnabled(false);
		}
		else
		{
			_correspondingProxyNode.setIsRunning(true);
			if (_correspondingButton != null)
				_correspondingButton.setEnabled(true);
		}
	}
	
	public Color getActivatedColor (){
		return _activatedColor;
	}
	
	public Color getDeactivatedColor (){
		return _deactivatedColor;
	}
	
	public void setCorrespondingButton (JToggleButton cb){
		_correspondingButton = cb;
	}
	
	public void setCorrespondingComboBox (JComboBox comboBox) {
		_correspondingComboBox = comboBox;
	}

	public void setExecutablePrefix (String execPrefix) {
		_executablePrefix = execPrefix;
	}
	
	public void setCorrerspondingProxyNode (ProxyNode proxyNode){
		_correspondingProxyNode = proxyNode;
	}
	
	public void startProxy(String eventHeap){
		if (!_correspondingProxyNode.isRunning())
		{
			_correspondingProxyNode.setIsRunning(true);
			doClick();
			_correspondingComboBox.getModel().setSelectedItem(eventHeap);
			if (_correspondingComboBox.getSelectedIndex() == -1)
				System.out.println("EHEAP NOT FOUND"+ _correspondingComboBox.getSelectedIndex());
		}
	}
	
	public boolean isCorrespondingProxyRunning(){
		return _correspondingProxyNode.isRunning();
	}
}
