import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.ListIterator;
import java.util.Vector;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;

public class ConfigDataHolder {
	
	private static Element _xmlRoot;
	
	private static void loadXMLFile () {
		
		//Element xmlRoot = null;
		try {
			// Load the configuration file
			File configFile = new File("configStarter.xml");
			Document docWithConfig;// = new Document();
			SAXBuilder builder = new SAXBuilder();
			docWithConfig = builder.build(configFile);
			_xmlRoot = docWithConfig.getRootElement();
			System.out.println("Processing XML - file");
		} catch (JDOMException e) {
			System.out.println("The XML - file may be corrupt");
		} 
		catch (IOException e) {
			System.out.println("No configFile found. New file created");
			new PreferencesDialog();
		}
		
	}
	public static Vector <File> getSearchDirectories () {
		Vector <File> searchDirectories = new Vector <File> ();
		// Now construct the proxyTree from the specified search directories
			Element [] directories = getXMLChildren ("SearchDirectories");
			for (int i=0; i < directories.length; i++) {
				Element currentElement = directories[i];
				File newDirectory = new File(currentElement.getValue());
				searchDirectories.add(newDirectory);
			}			
		return searchDirectories;
	}
	
	public static String getIrosLocation () {
		Element libs = getXMLChildValue ("Libraries");
			if (libs != null) 
				return libs.getChild("iROS").getValue();
		
		return null;
	}
	
	public static String getJmdnsLocation () {
		Element libs = getXMLChildValue ("Libraries");
		if (libs != null) 
			return libs.getChild("jmDNS").getValue();
		return null;
		
	}
	
	private static Element [] getXMLChildren (String childName) {
		loadXMLFile();
		if (_xmlRoot != null) {
			Element searchedElement = _xmlRoot.getChild(childName);
			List children = searchedElement.getChildren();
			return (Element[]) children.toArray();
		}
		return null;
	}
	private static Element getXMLChildValue (String childName) {
		loadXMLFile();
		if (_xmlRoot != null) {
			return _xmlRoot.getChild(childName);
		}
		return null;
	}
}

