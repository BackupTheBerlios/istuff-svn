import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.*;
import java.util.logging.ConsoleHandler;

import org.jdom.*;
import org.jdom.input.SAXBuilder;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

import com.sun.org.apache.bcel.internal.generic.RETURN;

public class PLMainFrame extends JFrame{
  
	private Vector _ehList = new Vector<String>();//<String>;// _ehList;// = {"localhost", "testhost"};
	private String[] testlist = {"a","b","c"};
	private GridBagLayout tabLayout = new GridBagLayout();
	private GridBagConstraints c = new GridBagConstraints();
	private List<File> proxyDirectories = new ArrayList<File> (1024);
	private JTabbedPane proxyTabs = new JTabbedPane();
	private ProxyTree proxyTree;
	private DefaultMutableTreeNode root = new DefaultMutableTreeNode("STARTUP");
	private DefaultTreeModel model = new DefaultTreeModel(root);
	private JTree proxyClassesTree = new JTree(model);
	private JPanel treePanel = new JPanel();
	private SAXBuilder builder = new SAXBuilder();
	
	private FindProxyStarters proxyFinder = new FindProxyStarters();//(searchDirectory, "proxy-description.xml",proxyTree);
	
	public PLMainFrame() {  
	  this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	  
	  //_ehList = new String [2];
	  scanForEventHeaps();
	  buildUpWindow();
	}
	
	@SuppressWarnings("unchecked")
	public void buildUpWindow () {

	// List<File> proxyDirectories;
	 

		// Load the configuration file
		File configFile = new File("configStarter.xml");
		Document docWithConfig = new Document();
        try {
			docWithConfig = builder.build(configFile);
			Element xmlFileRoot = docWithConfig.getRootElement();
			System.out.println(xmlFileRoot.getChildText("dir"));
			if (xmlFileRoot != null)
			{
				System.out.println("Processing XML - file");
				List<Element> xmlElements = xmlFileRoot.getChildren();
				for (ListIterator<Element> xmlIterator = xmlElements.listIterator(); xmlIterator.hasNext();)
				{
					File searchDirectory = new File(xmlIterator.next().getText());
					//FindProxyStarters newFinder = new FindProxyStarters(searchdirectory ,"proxy-description.xml",proxyTree);
					proxyTree = proxyFinder.getProxyTree(searchDirectory, "proxy-description.xml");	
				}
			  }
        }
			catch (JDOMException e) {
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("No configFile found. New file created");
			//e.printStackTrace();
		}
		
		
		//NOTE: The XML-reading works.
		// TODO: Now a way to precheck the XML descriptions is needed.
		// That can be postponed
		

		
	 // add a tabbed pane to the center. This pane holds the different proxy 
	 // classes view.
	 // At this stage of development, the first tab is directly initialized with
	 // a JPanel.
	 
	 
	 // For all tabs the same GridBagLayout is to be used.
	 // The constraints are defined here.
	 
	 //TODO: Now a method that scans directories for availiable proxies
	 // on the current system is needed.
	 // With that method, the JTree can be filled
	 // and the tabs instantiated as soon as a user wants to see them.
	 
	 add(treePanel, BorderLayout.WEST);
	 treePanel.add(proxyClassesTree);
	 //this.add(proxyClassesTree, BorderLayout.WEST);
	 JPanel topRowPanel = new JPanel();
	 topRowPanel.add(new JLabel("This space is reserved for a smarticon list or similar"));
	 add(topRowPanel, BorderLayout.NORTH);
	 
	 JPanel bottomRowPanel = new JPanel();
	 bottomRowPanel.add(new JLabel ("Here some other Panel can be added"));
	 add(bottomRowPanel, BorderLayout.SOUTH);
	 
	 JPanel eastPanel = new JPanel (new GridLayout(0,1));
	 
	 JPanel runningProxies = new JPanel(new BorderLayout());
	 //runningProxies.setSize((int)runningProxies.getSize().getWidth(),(int)this.getSize().getHeight()/2);
	 //runningProxies.setSize(new Dimension(100,100));
	 runningProxies.add(new JLabel("Proxies currently running"),BorderLayout.NORTH);
	 String[] proxydata = {"proxy1","proxy2","proxy3"};
	 JList proxyList = new JList (proxydata);
	 runningProxies.add (proxyList, BorderLayout.CENTER);
	 eastPanel.add(runningProxies);
	 
	 JPanel showEventHeaps = new JPanel (new BorderLayout());
	 showEventHeaps.add(new JLabel ("Found Event Heaps:"), BorderLayout.NORTH);
	 Object[] listOfEHeaps = _ehList.toArray();
	 JList eventHeapsList = new JList (listOfEHeaps);
	 showEventHeaps.add(eventHeapsList, BorderLayout.CENTER);
	 eastPanel.add(showEventHeaps);
	 
	 eastPanel.add( new JButton ("Scan for EventHeaps"));
	 add(eastPanel, BorderLayout.EAST);
	 // ActionListeners
	 // After a directory was chosen the List proxyDirectories is updated
	 // TODO: Load and Save Directories
	 // TODO: Add support to extend existing lists
	 
	 ActionListener callChooseDialog = new ActionListener(){
		 public void actionPerformed (ActionEvent e){
			 JFileChooser chooseProxyDir = new JFileChooser();
			 chooseProxyDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
			 chooseProxyDir.setAcceptAllFileFilterUsed(false);
			 chooseProxyDir.setFileFilter(new CustomFileFilter());	
			 int returnVal = chooseProxyDir.showDialog(null,"Search Directory");
			 // Search the selected directory 
			 if (returnVal == JFileChooser.APPROVE_OPTION){
			   File searchDirectory = chooseProxyDir.getSelectedFile();
			   //FindProxyStarters proxyStarters = new FindProxyStarters(searchDirectory, "proxy-description.xml",proxyTree);
			  proxyTree = proxyFinder.getProxyTree(searchDirectory, "proxy-description.xml");
			  updateWindow();
			}	
		 }
		 };
	 
			   //TODO A JTree should be returned that holds the directory structur for the
			   // proxy classes and for each class a list of the directories such that a tab can be filled.
			   //On double click: Open a tab
			   //on expanding: Enable Drag and Drop to create an own tab
			   // or extend the existing one
			   
		 			 
	 
	 // Fill the tabbed Pane with the nodes from the proxy tree
	 // each new kind is presented on a new tab
		 
	
	
	 
	 JMenuBar applicationMenuBar = new JMenuBar();
	 JMenu fileMenu = new JMenu ("File");
	 JMenuItem chooseDir = new JMenuItem("choose proxy directory");
	 fileMenu.add(chooseDir);
	 chooseDir.addActionListener(callChooseDialog);
	 applicationMenuBar.add(fileMenu);
	 this.setJMenuBar(applicationMenuBar);
	 
	 treePanel.remove(proxyClassesTree);
	   
	   
     treePanel.updateUI();
	 
	 setMinimumSize(new Dimension(800,500));
	 setSize(getMinimumSize());
	 this.setLocationByPlatform(true); // Let the OS decide where the new window
	 								   // appears.
	 this.add(proxyTabs, BorderLayout.CENTER); 
	 this.setVisible(true);
	 updateWindow();
	 
	 
	 // After choosing the corresponding command, a dialog should be displayed
	 // that lets the user choose a directory where to scan for proxies
	 
	 
	 
	 
	 
	 // Instantiate another floating window in that the running proxies are displayed.
	 
	
	// These lines can be used to make use of a floating window without decorations
	// RollDownWindow runningProxies = new RollDownWindow ("Running Proxies NEW");
	// JPanel titleBar = new JPanel();
	// titleBar.add(new JLabel("Running Proxies"));
	 //runningProxies.add(titleBar, BorderLayout.NORTH);
	 //runningProxies.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
	 
	 //runningProxies.setLocation(this.getLocationOnScreen().x+(int)this.getSize().getWidth(),this.getY());//(int)this.getLocationOnScreen().getY()+(int)this.getSize().height);
	 //runningProxies.setLocationRelativeTo(this);
	 //runningProxies.pack();
	// add(runningProxies,BorderLayout.EAST);
	 
	 //update(getGraphics());
	 //runningProxies.setVisible(true);
	}
	
	
	public void updateWindow(){
		//IDEA: Delete the whole Panel and rebuild it
		// Activate the buttons that were activated before
		// The buttons "know" about that
		
		//delete the proxyTabs
		
		proxyTabs.removeAll();
		this.paintAll(getGraphics());
		for ( Iterator<ProxyNode> i = proxyTree.getTreeRoot().getSuccessors().iterator(); i.hasNext();)
		 {
		    ProxyNode kind = (ProxyNode) i.next();
		    System.out.println("Kind found: " + kind.getKind());
		    for (Iterator<ProxyNode> i2 = kind.getSuccessors().iterator(); i2.hasNext();)
		    	{
		    		ProxyNode proxyClass = (ProxyNode) i2.next();
		    		JPanel newTabForClass = (new JPanel(tabLayout));
		    		newTabForClass.setName(proxyClass.getName());
		    		//proxyTabs.getComponents().getClass().getName()
		    		proxyTabs.add(newTabForClass);
		    		System.out.println("ProxyClass found: " + proxyClass.getproxyClass());
		    		c.gridx = 0;
		    		c.gridy = -1;
		    		for (Iterator<ProxyNode> i3 = proxyClass.getSuccessors().iterator(); i3.hasNext();)
		    		{
		    			ProxyNode proxy = (ProxyNode) i3.next();
		    			c.gridy = c.gridy +1;
		    			// TODO: Extend the class JToggleButton in such a way that
		    			// it also keeps information about the application to be started.
		    			// A parameter with the ExecName XML-value
		    			//or make use of an inner class
		    			//I Think that makes more sense!
	 	 
		    			ChangeColorButton newButtonForTab = new ChangeColorButton (proxy.getName(),Color.GREEN,Color.RED);
		    			showConsoleButton showConsole = new showConsoleButton(newButtonForTab, newButtonForTab.getText() + " Console");
		    			newButtonForTab.setCorrespondingButton(showConsole);
		    			newButtonForTab.setCorrerspondingProxyNode(proxy);
		    			if (newButtonForTab.isCorrespondingProxyRunning())
		    				newButtonForTab.doClick();
		    			
		    			JComboBox newBox = new JComboBox(_ehList);
		    			newButtonForTab.setCorrespondingComboBox(newBox);
		    			showConsole.setExecutablePrefix(proxy.getExecutableName());
		    			showConsole.setCorrespondingCombox(newBox);
		    			showConsole.setExecutablePrefix(proxy.getExecutableName());
		    				//TODO Add ComboBox to select a different Event Heap
		    				// that the proxy should connect to
		    				
		    				// TODO Add button to run a local Event Heap
		    				// An additional field should be able to specify the
		    				//name of the Even Heap
		    				
		    				//TODO A button is needed to scan for existing Event Heaps
		    				    			
		
		    			
		    			
		    			
		    			newTabForClass.add (newButtonForTab,c);
		    			c.gridx = c.gridx + 1;
		    			newTabForClass.add(newBox,c);
		    			c.gridx = c.gridx + 1;
		    			newTabForClass.add (showConsole,c);
		    			c.gridx = 0;
		    	//		System.out.println("Proxy found: " + proxy.getName());
		    		}
		    	}
		    	
		    }
			 }
	public void scanForEventHeaps (){
		_ehList.add("localhost");
		_ehList.add("another machine");
		//System.out.println(_ehList[1]+ "Array value");
	}
	
	public void loadAndStartProxies (){
		
	}
			 
		 
} // end of class



